{"format": "json", "content": {"cells": [{"cell_type": "code", "execution_count": 33, "source": "import crawler\nimport calculator\nimport pandas\n\ndomesticDf=crawler.GetDf('http://info.finance.naver.com/fund/fundTypeEarningRate.nhn?ivstAreaWorldYn=N')\noverseasDf=crawler.GetDf('http://info.finance.naver.com/fund/fundTypeEarningRate.nhn?ivstAreaWorldYn=Y')\n\nearningRateDf = domesticDf.append(overseasDf, ignore_index=True)\nearningRateDf = calculator.GetCalc(earningRateDf)\n\ndomesticDf=calculator.GetCalc(domesticDf)\noverseasDf=calculator.GetCalc(overseasDf)\n\ndomesticStockDf = domesticDf[domesticDf['\ub300\uc720\ud615'].str.contains(\"\uc8fc\uc2dd\")].reset_index(drop=True)\ndomesticBondDf= domesticDf[domesticDf['\ub300\uc720\ud615'].str.contains(\"\ucc44\uad8c\")].reset_index(drop=True)\n\noverseaStockDf = overseasDf[overseasDf['\ub300\uc720\ud615'].str.contains(\"\uc8fc\uc2dd\")].reset_index(drop=True)\noverseaBondDf = overseasDf[overseasDf['\ub300\uc720\ud615'].str.contains(\"\ucc44\uad8c\")].reset_index(drop=True)\n\nrealestateDf =  earningRateDf[earningRateDf['\ub300\uc720\ud615'].str.contains(\"\ubd80\ub3d9\uc0b0\")].reset_index(drop=True)\ncashDf =  earningRateDf[earningRateDf['\ub300\uc720\ud615'].str.contains(\"MMF\")].reset_index(drop=True)\n\nresultDf = pandas.DataFrame(columns=earningRateDf.columns)\ndfList = [domesticStockDf,domesticBondDf,overseaStockDf,overseaBondDf,realestateDf,cashDf]\n\nfor x in dfList:\n    if x.empty==False:\n        resultDf = resultDf.append(x.iloc[0])\n\nfuzzyDf=pandas.DataFrame()\nfuzzyDf['\ub300\uc720\ud615']=resultDf['\ub300\uc720\ud615']\n\n###############################################\n# \ud37c\uc9c0\ud654\n# x\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \uc124\ubb38\uc870\uc0ac \ud639\uc740 \uc778\uacf5\uc9c0\ub2a5\uc5d0 \ub530\ub77c \ud568\uc218 \ubcc0\uacbd \uac00\ub2a5\n# x/15-(16/3)\uac19\uc740 \ubd80\ubd84\uc744 \ud568\uc218\ud654 \uc2dc\ucf1c \ucc28\ud6c4 DB\uc640 \uc5f0\ub3d9.\n##############################################\nsafetyHigh=[]\nfor x in resultDf.Safety:\n    if x>80 and x<95:\n        safetyHigh.append(x/15-(16/3))\n    elif x>=95:\n        safetyHigh.append(1)\n    else:\n        safetyHigh.append(0)\nfuzzyDf['SafetyHigh']=safetyHigh\n\nsafetyMid=[]\nfor x in resultDf.Safety:\n    if x>50 and x<=75:\n        safetyMid.append(x/25-2) \n    elif x>75:\n        safetyMid.append(-(x/25)+4)\n    else:\n        safetyMid.append(0)\nfuzzyDf['SafetyMid']=safetyMid\n\nsafetyLow=[]\nfor x in resultDf.Safety:\n    if x>=20 and x<=(160/3):\n        safetyLow.append(-(x*3/100)+(8/5)) \n    elif x<20:\n        safetyLow.append(1)\n    else:\n        safetyLow.append(0)\nfuzzyDf['SafetyLow']=safetyLow\n\nreturnHigh=[]\nfor x in resultDf['\uae30\ub300\uc218\uc775\ub960']:\n    if x>=2 and x<8:\n        returnHigh.append(x/6-(1/3)) \n    elif x>=8:\n        returnHigh.append(1)\n    else:\n        returnHigh.append(0)\nfuzzyDf['returnHigh']=returnHigh\n\nreturnLow=[]\nfor x in resultDf['\uae30\ub300\uc218\uc775\ub960']:\n    if x>=2 and x<4:\n        returnLow.append(-(x/4)+1) \n    elif x<2:\n        returnLow.append(1)\n    else:\n        returnLow.append(0)\nfuzzyDf['returnLow']=returnLow\n\n########################################\n# \uaddc\uce59\uacc4\uc0b0 - \uace0\uac1d\uc758 \uc131\ud5a5\uc5d0 \ub530\ub77c \uaddc\uce59\uc740 \ub2ec\ub77c\uc9d0.\n# \ud604\uc7ac\uaddc\uce59 - \ubcf4\uc218\uc801 \uc131\ud5a5\n# \uaddc\uce591\n# IF \uc548\uc804\ub3c4\uac00 / \ub0ae\ub2e4\n# and \uc218\uc775\ub960\uc774 / \ub192\ub2e4\n# then \ube44\uc911\uc774 / \ub0ae\ub2e4\n#\n# \uaddc\uce592\n# IF \uc548\uc804\ub3c4\uac00 / \ub192\ub2e4\n# and \uc218\uc775\ub960\uc774 / \ub0ae\ub2e4\n# then \ube44\uc911\uc774 / \ubcf4\ud1b5\uc774\ub2e4\n#\n# \uaddc\uce593\n# IF \uc548\uc804\ub3c4\uac00 / \ud560\ub9cc\ud558\ub2e4\n# and \uc218\uc775\ub960\uc774 / \ub192\ub2e4\n# then \ube44\uc911\uc774 / \ub192\ub2e4\n#########################################\n\nsetHigh=[]\nfor index, x in fuzzyDf.iterrows():\n    setHigh.append(x['SafetyMid']*x['returnHigh'])\nfuzzyDf['setHigh']=setHigh\n\nsetMid=[]\nfor index, x in fuzzyDf.iterrows():\n    setMid.append(x['SafetyHigh']*x['returnLow'])\nfuzzyDf['setMid']=setMid\n\nsetLow=[]\nfor index, x in fuzzyDf.iterrows():\n    setLow.append(x['SafetyLow']*x['returnHigh'])\nfuzzyDf['setLow']=setLow\n\n##############################################\n# COG \uad6c\ud560 \ucc28\ub840\n##############################################\n\nfuzzyDf", "metadata": {"deletable": true, "trusted": true, "editable": true, "scrolled": false, "collapsed": false}, "outputs": [{"data": {"text/html": "<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>\ub300\uc720\ud615</th>\n      <th>SafetyHigh</th>\n      <th>SafetyMid</th>\n      <th>SafetyLow</th>\n      <th>returnHigh</th>\n      <th>returnLow</th>\n      <th>setHigh</th>\n      <th>setMid</th>\n      <th>setLow</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>\uc8fc\uc2dd\ud63c\ud569\ud615</td>\n      <td>0.000000</td>\n      <td>0.026790</td>\n      <td>0.079907</td>\n      <td>0.842845</td>\n      <td>0</td>\n      <td>0.022580</td>\n      <td>0.0</td>\n      <td>0.06735</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>\ucc44\uad8c\ud615</td>\n      <td>1.000000</td>\n      <td>0.021440</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1</td>\n      <td>0.000000</td>\n      <td>1.0</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>\ud574\uc678\uc8fc\uc2dd\ud615</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>\ud574\uc678\ucc44\uad8c\ud615</td>\n      <td>0.094488</td>\n      <td>0.743307</td>\n      <td>0.000000</td>\n      <td>0.960550</td>\n      <td>0</td>\n      <td>0.713984</td>\n      <td>0.0</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>MMF</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1</td>\n      <td>0.000000</td>\n      <td>1.0</td>\n      <td>0.00000</td>\n    </tr>\n  </tbody>\n</table>\n</div>", "text/plain": "     \ub300\uc720\ud615  SafetyHigh  SafetyMid  SafetyLow  returnHigh  returnLow   setHigh  \\\n0  \uc8fc\uc2dd\ud63c\ud569\ud615    0.000000   0.026790   0.079907    0.842845          0  0.022580   \n0    \ucc44\uad8c\ud615    1.000000   0.021440   0.000000    0.000000          1  0.000000   \n0  \ud574\uc678\uc8fc\uc2dd\ud615    1.000000   0.000000   0.000000    1.000000          0  0.000000   \n0  \ud574\uc678\ucc44\uad8c\ud615    0.094488   0.743307   0.000000    0.960550          0  0.713984   \n0    MMF    1.000000   0.000000   0.000000    0.000000          1  0.000000   \n\n   setMid   setLow  \n0     0.0  0.06735  \n0     1.0  0.00000  \n0     0.0  0.00000  \n0     0.0  0.00000  \n0     1.0  0.00000  "}, "execution_count": 33, "output_type": "execute_result", "metadata": {}}]}, {"cell_type": "code", "execution_count": null, "source": "resultDf.reset_index(drop=True)", "metadata": {"deletable": true, "trusted": true, "editable": true, "collapsed": false}, "outputs": []}, {"cell_type": "code", "execution_count": null, "source": "", "metadata": {"trusted": true, "collapsed": true}, "outputs": []}], "metadata": {"language_info": {"version": "3.5.2", "file_extension": ".py", "pygments_lexer": "ipython3", "codemirror_mode": {"version": 3, "name": "ipython"}, "name": "python", "mimetype": "text/x-python", "nbconvert_exporter": "python"}, "kernelspec": {"name": "python3", "display_name": "Python 3", "language": "python"}}, "nbformat_minor": 2, "nbformat": 4}, "type": "notebook", "path": "fuzzy.ipynb", "created": "2017-04-02T15:27:22.501826+00:00", "name": "fuzzy.ipynb", "mimetype": null, "last_modified": "2017-04-02T15:27:22.501826+00:00", "writable": true}šS #ý      Xâ†ÿXâ†ÿ=œ<‰Xâ«©   K    :http://0.0.0.0:8888/api/contents/fuzzy.ipynb?type=notebook&_=1491240702577 necko:classified 1 strongly-framed 1 request-method GET response-head HTTP/1.1 200 OK
Date: Mon, 03 Apr 2017 17:31:43 GMT
Content-Type: application/json
Last-Modified: Sun, 02 Apr 2017 15:27:22 GMT
Content-Security-Policy: frame-ancestors 'self'; report-uri /api/security/csp-report; default-src 'none'
Etag: "3ca2524f760c71bb6a4ba598f80300fbe357b11e"
Content-Length: 8081
Server: TornadoServer/4.4.2
 original-response-headers Date: Mon, 03 Apr 2017 17:31:43 GMT
Content-Type: application/json
Last-Modified: Sun, 02 Apr 2017 15:27:22 GMT
Content-Security-Policy: frame-ancestors 'self'; report-uri /api/security/csp-report; default-src 'none'
Etag: "3ca2524f760c71bb6a4ba598f80300fbe357b11e"
Content-Length: 8081
Server: TornadoServer/4.4.2
 net-response-time-onstart 615 net-response-time-onstop 616   ‘